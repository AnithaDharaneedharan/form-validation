{"version":3,"sources":["components/Register.js","App.js","serviceWorker.js","index.js"],"names":["toast","configure","emailRegex","RegExp","Register","props","fname","React","createRef","lname","mail","password","handleValidation","current","value","length","error","test","handleSubmit","e","preventDefault","formErrors","valid","Object","values","forEach","val","formValid","state","console","setState","firstName","lastName","email","success","errors","className","onSubmit","this","noValidate","htmlFor","type","name","placeholder","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2QAIAA,IAAMC,YAEN,IAAMC,EAAaC,OACjB,uEAUmBC,E,kDAMnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IANRC,MAAQC,IAAMC,YAKK,EAJnBC,MAAQF,IAAMC,YAIK,EAHnBE,KAAOH,IAAMC,YAGM,EAFnBG,SAAWJ,IAAMC,YAEE,EAkBnBI,iBAAmB,WAGb,EAAKN,MAAMO,QAAQC,MAAMC,OAAS,GACpCf,IAAMgB,MAAM,+CAGV,EAAKP,MAAMI,QAAQC,MAAMC,OAAS,GACpCf,IAAMgB,MAAM,8CAGTd,EAAWe,KAAK,EAAKP,KAAKG,QAAQC,QACrCd,IAAMgB,MAAM,yBAGV,EAAKL,SAASE,QAAQC,MAAMC,OAAS,GACvCf,IAAMgB,MAAM,iDAlCG,EAsCnBE,aAAe,SAACC,GACd,EAAKP,mBAELO,EAAEC,kBAtDY,SAACC,GAEjB,IAAIC,GAAQ,EAEZ,OADAC,OAAOC,OAAOH,GAAYI,SAAQ,SAACC,GAAD,OAASA,EAAIX,OAAS,IAAMO,GAAQ,MAC/DA,EAmDDK,CAAU,EAAKC,MAAMP,YASvBQ,QAAQb,MAAM,yCARd,EAAKc,SAAS,CACZC,UAAW,EAAKH,MAAMG,UACtBC,SAAU,EAAKJ,MAAMI,SACrBC,MAAO,EAAKL,MAAMK,MAClBtB,SAAU,EAAKiB,MAAMjB,WAEvB,EAAKmB,SAAS,CAAEI,SAAS,MA/C3B,EAAKN,MAAQ,CACXG,UAAW,GACXC,SAAU,GACVC,MAAO,GACPtB,SAAU,GACVU,WAAY,CACVU,UAAW,GACXC,SAAU,GACVC,MAAO,GACPtB,SAAU,IAEZuB,QAAS,GACTC,OAAQ,IAdO,E,qDAwDjB,OACE,yBAAKC,UAAU,SACZ,IACD,4CACA,0BAAMC,SAAUC,KAAKpB,aAAcqB,YAAU,GAC3C,6BACE,2BAAOC,QAAQ,aAAf,cACA,2BACEJ,UAAU,aACVK,KAAK,OACLC,KAAK,YACLC,YAAY,mBACZC,IAAKN,KAAKhC,SAId,6BACE,2BAAOkC,QAAQ,YAAf,aACA,2BACEJ,UAAU,aACVK,KAAK,OACLC,KAAK,WACLC,YAAY,iBACZC,IAAKN,KAAK7B,SAGd,6BACE,2BAAO+B,QAAQ,SAAf,YACA,2BACEJ,UAAU,aACVK,KAAK,QACLC,KAAK,QACLC,YAAY,gBACZC,IAAKN,KAAK5B,QAGd,6BACE,2BAAO8B,QAAQ,YAAf,YACA,2BACEJ,UAAU,aACVK,KAAK,WACLC,KAAK,WACLC,YAAY,qBACZC,IAAKN,KAAK3B,YAGd,6BACE,4BAAQ8B,KAAK,SAASL,UAAU,kBAAhC,mBAIDE,KAAKV,MAAMM,QACV,yBAAKE,UAAU,WAAf,gCAEA,yBAAKA,UAAU,iBACZ,IADH,2C,GApH0BS,a,MCJvBC,MATf,WACE,OACE,yBAAKV,UAAU,OAEX,kBAAC,EAAD,QCIYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLa,QAAQb,MAAMA,EAAMgD,c","file":"static/js/main.215cf734.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { toast } from \"react-toastify\";\n\ntoast.configure();\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&'*/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = (formErrors) => {\n  debugger;\n  let valid = true;\n  Object.values(formErrors).forEach((val) => val.length > 0 && (valid = false));\n  return valid;\n};\n\nexport default class Register extends Component {\n  fname = React.createRef();\n  lname = React.createRef();\n  mail = React.createRef();\n  password = React.createRef();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      formErrors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n      },\n      success: \"\",\n      errors: \"\",\n    };\n  }\n\n  handleValidation = () => {\n    debugger;\n\n    if (this.fname.current.value.length < 3) {\n      toast.error(\"minimum 3 characters required for firstname\");\n    }\n\n    if (this.lname.current.value.length < 3) {\n      toast.error(\"minimum 3 characters required for lastname\");\n    }\n\n    if (!emailRegex.test(this.mail.current.value)) {\n      toast.error(\"Invalid email address\");\n    }\n\n    if (this.password.current.value.length < 6) {\n      toast.error(\"password should have minimum of 6 characters\");\n    }\n  };\n\n  handleSubmit = (e) => {\n    this.handleValidation();\n    debugger;\n    e.preventDefault();\n    if (formValid(this.state.formErrors)) {\n      this.setState({\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password,\n      });\n      this.setState({ success: true });\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        {\" \"}\n        <b>Register Form</b>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <div>\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              className=\"login-item\"\n              type=\"text\"\n              name=\"firstName\"\n              placeholder=\"your first name \"\n              ref={this.fname}\n            ></input>\n          </div>\n\n          <div>\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              className=\"login-item\"\n              type=\"text\"\n              name=\"lastName\"\n              placeholder=\"your last name\"\n              ref={this.lname}\n            ></input>\n          </div>\n          <div>\n            <label htmlFor=\"email\">Email id</label>\n            <input\n              className=\"login-item\"\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"your email id\"\n              ref={this.mail}\n            ></input>\n          </div>\n          <div>\n            <label htmlFor=\"password\">password</label>\n            <input\n              className=\"login-item\"\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"type your password\"\n              ref={this.password}\n            ></input>\n          </div>\n          <div>\n            <button type=\"submit\" className=\"button-primary\">\n              Create Account\n            </button>\n          </div>\n          {this.state.success ? (\n            <div className=\"success\">Form successfully registered</div>\n          ) : (\n            <div className=\"error_message\">\n              {\" \"}\n              Please fill the incomplete fields\n            </div>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Register from './components/Register';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        {/* <Login/> */}\n        <Register/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}