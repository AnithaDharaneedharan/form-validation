{"version":3,"sources":["components/Login.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["Component","emailRegex","RegExp","Register","props","handleChange","e","target","name","value","formErrors","state","firstName","length","lastName","email","test","password","setState","handleSubmit","alert","preventDefault","valid","Object","values","forEach","val","formValid","console","error","this","className","onSubmit","noValidate","htmlFor","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.daa2d1cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport reactDOM from 'react-dom';\n\n\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username : ''\n        };\n    }\n\n\n    handleNameChange(e) {\n        debugger\n        if (e.key === \"Enter\") {\n            this.setState({username: e.target.value})\n            console.log(this.state.username)\n        }\n      \n    }\n\n    handlePasswordChange(e) {\n        debugger\n        if (e.key === \"Enter\") {\n            this.setState({password: e.target.value})\n            console.log(this.state.password)\n        }\n    }\n\n    submitLogin() {\n        debugger\n        console.log(\"submit\")\n    }\n\n    render() {\n        return (\n            <div className=\"login\"> Login Form\n                <input className=\"login-item\"  type=\"text\" name=\"username\" placeholder=\"your name\" onKeyUp={e => this.handleNameChange(e)}></input>\n                <input  className=\"login-item\"  type=\"password\" name=\"password\" placeholder=\"type your password\" onKeyUp={e => this.handlePasswordChange(e)}></input>\n                <button type=\"button\" className=\"button-primary\" onClick={(e)=> this.submitLogin(e)}>Login</button>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from \"react\";\nimport reactDOM from \"react-dom\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&'*/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = (formErrors) => {\n  debugger;\n  let valid = true;\n  Object.values(formErrors).forEach((val) => val.length > 0 && (valid = false));\n // Object.values(rest).forEach(val=> (val === null) && (valid =false ));\n  return valid;\n};\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      formErrors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n      },\n    };\n  }\n\n  handleChange = (e) => {\n    debugger;\n    const { name, value } = e.target;\n    let formErrors = this.state.formErrors;\n\n    switch (name) {\n      case \"firstName\":\n        formErrors.firstName =\n          value !== null && value.length < 3\n            ? \"minimum 3 characters required\"\n            : \"\";\n        break;\n      case \"lastName\":\n        formErrors.lastName =\n          value.length < 3 ? \"minimum 3 characters required\" : \"\";\n        break;\n      case \"email\":\n        formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"Invalid email address\";\n        break;\n      case \"password\":\n        formErrors.password =\n          value.length < 6 ? \"minimum 6 characters required\" : \"\";\n        break;\n      default:\n        break;\n    }\n    this.setState({ formErrors: formErrors, [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    this.handleChange(e);\n    alert(\"success\")\n    debugger;\n    e.preventDefault();\n    if (formValid(this.state.formErrors)) {\n      this.setState({\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password,\n      });\n      //alert(`${this.state.firstName} ${this.state.lastName}  Registered Successfully !!!!`)\n      //   console.log(`\n      //   firstName: ${this.state.firstName},\n      //   lastName: ${this.state.lastName},\n      //   email: ${this.state.email},\n      //   password: ${this.state.password},\n      //    `);\n    } else {\n      console.error(\"FORM INVALID - DISPLAY ERROR MESSAGE\");\n    }\n  };\n\n  render() {\n    const formErrors = this.state.formErrors;\n    return (\n      <div className=\"login\">\n        {\" \"}\n        <b>Register Form</b>\n        <form onSubmit={this.handleSubmit} noValidate>\n          <div>\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n              className={`login-item ${\n                formErrors.firstName.length > 0 ? \"error\" : \"\"\n              }`}\n              type=\"text\"\n              name=\"firstName\"\n              placeholder=\"your first name \"\n              onChange={this.handleChange}\n            ></input>\n            {formErrors.firstName.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.firstName}</span>\n            )}\n          </div>\n          <div>\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n              className={`login-item ${\n                formErrors.lastName.length > 0 ? \"error\" : \"\"\n              }`}\n              type=\"text\"\n              name=\"lastName\"\n              placeholder=\"your last name\"\n              onChange={(e) => this.handleChange(e)}\n            ></input>\n            {formErrors.lastName.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.lastName}</span>\n            )}\n          </div>\n          <div>\n            <label htmlFor=\"email\">Email id</label>\n            <input\n              className={`login-item ${formErrors.email.length > 0 ? \"error\" : \"\"}`}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"your email id\"\n              onChange={(e) => this.handleChange(e)}\n            ></input>\n            {formErrors.email.length > 0 && <span className=\"errorMessage\">{formErrors.email}</span>}\n          </div>\n          <div>\n            <label htmlFor=\"email\">password</label>\n            <input\n              className={`login-item ${\n                formErrors.password.length > 0 ? \"error\" : \"\"\n              }`}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"type your password\"\n              onChange={(e) => this.handleChange(e)}\n            ></input>\n            {formErrors.password.length > 0 && (\n              <span className=\"errorMessage\">{formErrors.password}</span>\n            )}\n          </div>\n          <div>\n            <button type=\"submit\" className=\"button-primary\">\n              Create Account\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Login from './components/Login';\nimport Register from './components/Register';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        {/* <Login/> */}\n        <Register/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}